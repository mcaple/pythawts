:py:mod:`core`
==============

.. py:module:: core

.. autoapi-nested-parse::

   This module contains what I consider best practices for 'for loops'.

   Influenced by :ref:`Raymond hettinger`



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   core.original_idea
   core.google_docstrings
   core.numpy_docstrings
   core.empty
   core.dummy_function_example



.. py:function:: original_idea()

   The description about original_idea


.. py:function:: google_docstrings(num1, num2) -> int

   Add up two integer numbers.

   This function simply wraps the ``+`` operator, and does not
   do anything interesting, except for illustrating what
   the docstring of a very simple function looks like.

   :param num1: First number to add.
   :type num1: int
   :param num2: Second number to add.
   :type num2: int

   :returns: The sum of ``num1`` and ``num2``.

   :raises AnyError: If anything bad happens.


.. py:function:: numpy_docstrings(num1, num2) -> int

   Add up two integer numbers.

   This function simply wraps the ``+`` operator, and does not
   do anything interesting, except for illustrating what
   the docstring of a very simple function looks like.

   :param num1: First number to add.
   :type num1: int
   :param num2: Second number to add.
   :type num2: int

   :returns: The sum of ``num1`` and ``num2``.
   :rtype: int

   :raises MyException: if anything bad happens

   .. seealso::

      :obj:`subtract`
          Subtract one integer from another.

   .. rubric:: Examples

   >>> add(2, 2)
   4
   >>> add(25, 0)
   25
   >>> add(10, -10)
   0


.. py:function:: empty(shape, dtype=None, order='C')

   Return a new matrix of given shape and type, without initializing entries.

   :param shape: Shape of the empty matrix.
   :type shape: int or tuple of int
   :param dtype: Desired output data-type.
   :type dtype: data-type, optional
   :param order: Whether to store multi-dimensional data in row-major
                 (C-style) or column-major (Fortran-style) order in
                 memory.
   :type order: {'C', 'F'}, optional

   .. seealso:: :obj:`empty_like`, :obj:`zeros`, :obj:`..`


.. py:function:: dummy_function_example(name, foo=None)

   The docstring in the function should fully explain what the function is
   for and how to use it

   * this is a bullet list
   * with multiple entries and some text in *italic* and even **bold**.
     The bullet list items can span multiple lines which are indented

   .. warning:: bullet (as well as enumerated) lists have to start and end
      with an empty line

   1. Single backquotes are for **references** to other documented items.
      For example `basf2.Module` will link to the documentation of the class
      Module in the python module basf2. A different link name and link
      target can be specified with <>: `Module class <basf2.Module>` will
      link to basf2.Module but the link will read "Module class"
   2. Double backquotes are for ``literal text``.

   .. warning:: this is different to markdown where single backquotes are
      usually used for literal text

   3. Links to external websites are usually of the form `Link Text <http://example.com>`_.

   .. note:: there is an underscore at the end of links

   4. math is supported either inline :math:`f(x) = \sum_{x=i}^N x^i` or as
      display verssion:

      .. math::

         f(x) = \sum_{i=1}^N x^i

      .. seealso:: `Math support in Sphinx <http://www.sphinx-doc.org/en/stable/ext/math.html>`_
   5. The easiest way for code example is the "doctest" syntax: Start a new
      paragaph after an empty line with ``>>>`` followed by the python
      statements and (optionally) the expected output of these statements.

      >>> dummy_function_example("some name", foo="bar")
      "Hello some name, Lord of bar"

      .. seealso:: `Showing code examples <http://www.sphinx-doc.org/en/stable/markup/code.html>`_

   6. To document parameters and return types please use the :ref:`googlestyle` as shown below:

   .. note:: For class members please do not include the ``self`` parameter in this list

   :param name: Description of the first parameter
                Can also span multiple lines if indented properly
   :type name: str
   :param foo: Second parameter but no type given

   :returns: Description of the return value

   .. seealso:: Some references to other functions


